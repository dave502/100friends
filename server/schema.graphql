enum Sex {
    male
    female
}

type Good {
    user: User!  @relationship(type: "DOES", direction: IN)
    fund: Fund @relationship(type: "DOES_GOOD_TO", direction: OUT)
    date: Date!
}

type User {
    userId: ID!
    name: String!
    socialIDs: [SocialID!]! @relationship(type: "DEFINED_BY", direction: IN)
    groups: [Group!]! @relationship(type: "BELONGS_TO", direction: OUT)
    friends: [User!]! @relationship(type: "FRIENDED", direction: OUT)
    frienders: [User!]! @relationship(type: "FRIENDED", direction: IN)
    displayGroups: Boolean
    city: String
    birthday: String
    sex: Sex
    privateProfile: Boolean
    good: [Good!]! @relationship(type: "DOES", direction: OUT)
    password: String
    wordsVec: WordsVec @relationship(type: "HAS_VEC", direction: IN)
    approved: Boolean
    recommended(first: Int = 10): [User!]!
        @cypher(
            statement: """
            MATCH (this)<-[:HAS_VEC]-(wv:WordsVec.similars($first))-[sim:HAS_VEC]->(users:User)
            # MATCH (wv)-[:SIMILAR_TO]->(:WordsVec)-[sim:HAS_VEC]->(users:User)
            # WITH users, sim as similarity 
            RETURN users ORDER BY similarity DESC LIMIT $first
            """,
            columnName: "users"
        )
}

enum Socials {
    telegram
    email
}

type SocialID {
    social: Socials!
    username: String!
    user: User! @relationship(type: "DEFINED_BY", direction: OUT)
    display: Boolean
}

type Group {
    groupID: ID!
    groupName: String
    users(first: Int = 20, offset: Int = 0): [User!]!  
        @relationship(type: "BELONGS_TO", direction: IN)
}

type WordsVec {
    vec: String!
    user: User! @relationship(type: "HAS_VEC", direction: OUT)
    similars(first: Int = 10): [WordsVec!]!   
        @cypher(
            # change
            statement: """
            MATCH (this)<-[:HAS_VEC]-(wv:WordsVec)
            MATCH (wv)-[:SIMILAR_TO]->(:WordsVec)-[sim:HAS_VEC]->(users:User)
            WITH users, sim as similarity 
            RETURN users ORDER BY similarity DESC LIMIT $first
            """,
            columnName: "users"
        )
}


type Fund {
    fundID: ID!
    name: String!
    description: String!
    goods: [Good!]! @relationship(type: "DOES_GOOD_TO", direction: IN)
}
