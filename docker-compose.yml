version: '3.8'

# Custom top-level network
# networks:
#   neo4j-internal:

services:

  traefik:
    image: traefik:v2.10
    container_name: 100f_traefik
    restart: unless-stopped
    command:
      - --api
      #- "--log.level=DEBUG"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.redis.address=:6379"
      - "--entrypoints.grpc.address=:50051"
      - "--certificatesresolvers.resolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.resolver.acme.email=d.n.davtyan@gmail.com"
      - "--certificatesresolvers.resolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.resolver.acme.httpchallenge=true"
      - "--certificatesresolvers.resolver.acme.httpchallenge.entrypoint=web"
    ports:
      - "443:443"
      - "80:80"
    labels:
      # Traefik Dashboard
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${HOST}`)"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik-secure.entrypoints=websecure"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.${HOST}`)"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=resolver"      
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
      - "traefik.http.routers.redirect-router.entrypoints=websecure"
      - "traefik.http.routers.redirect-router.tls=true"
      - "traefik.http.routers.redirect-router.tls.certresolver=resolver"  
      - "traefik.http.middlewares.traefik-auth.basicauth.users=dave:$$apr1$$rylKatpr$$zWOmPJxqtkuFJjYoVW/8.1"
      - "traefik.http.routers.redirect-router.rule=Host(`${HOST}`) && PathPrefix(`/__/auth/`)"
      - "traefik.http.routers.redirect-router.middlewares=redirect-regex"
      - "traefik.http.middlewares.redirect-regex.redirectregex.regex=^https://100friends.ru/__/auth/(.*)" #(.)*"
      - "traefik.http.middlewares.redirect-regex.redirectregex.replacement=https://friends-a2c14.firebaseapp.com/__/auth/$${1}"
      - "traefik.http.middlewares.redirect-regex.redirectregex.permanent=false"
      # - "traefik.http.middlewares.redirect-google.redirectregex.regex: `^https?://auth\\.100friends\\.ru/__/auth/handler`"
      # - "traefik.http.middlewares.redirect-google.redirectregex.replacement: `https://friends-a2c14.firebaseapp.com/__/auth/`"
      # - "traefik.http.middlewares.redirect-google.redirectregex.permanent: `false`"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - 100friends
    logging:
      driver: "json-file"
      options:
        max-size: "0.3m"

  neo4j:
    # Docker image to be used
    image: neo4j:latest

    # Hostname
    hostname: neo4j
    container_name: 100f_neo4j
    
    # Service-level network, which specifies the networks, from the list of the top-level networks (in this case only neo4j-internal), that the server will connect to.
    # Adds a network alias (used in neo4j.conf when configuring the discovery members)
    # networks:
    #   neo4j-internal:
    #     aliases:
    #       - neo4j-network

    # The ports that will be accessible from outside the container - HTTP (7474) and Bolt (7687).
    ports:
      - "7474:7474"
      - "7687:7687"

    # Uncomment the volumes to be mounted to make them accessible from outside the container.
    # https://neo4j.com/docs/operations-manual/current/docker/mounting-volumes/
    volumes:
      # - ./neo4j/conf/neo4j.conf:/conf/neo4j.conf # This is the main configuration file.
      # - ./neo4j/logs:/logs
      # - ./neo4j/import/:/import
      - neo4j_data:/data/
      # - ./neo4j/conf:/conf
      #- ./metrics/server1:/metrics
      #- ./licenses/server1:/licenses
      #- ./ssl/server1:/ssl
    env_file:
      - .env.neo4j
    networks:
      - 100friends
    logging:
      driver: "json-file"
      options:
        max-size: "0.3m"

    # Simple check testing whether the port 7474 is opened.
    # If so, the instance running inside the container is considered as "healthy".
    # This status can be checked using the "docker ps" command.
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]

    # # Set up the user
    # user: ${USER_ID}:${GROUP_ID}
    
  # backend:
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.grpc.rule=Host(`rpc.${HOST}`)"
  #     - "traefik.http.routers.grpc.entrypoints=grpc"
  #     - "traefik.http.services.grpc.loadbalancer.server.scheme=h2c"
  #     - "traefik.http.middlewares.mw-grpc.grpcweb.allowOrigins=*"
  #     - "traefik.http.routers.grpc.middlewares=mw-grpc"
  #     - "traefik.http.routers.grpc.tls.certresolver=resolver"
  #     - "traefik.http.routers.grpc.tls=true"
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   # depends_on:
  #   #   #- rabbitmq
  #   #   - influxdb
  #   container_name: 100f_backend
  #   ports: [50051]
  #   env_file:
  #     - .env
  #   networks:
  #     - 100friends
  #   logging:
  #       driver: "json-file"
  #       options:
  #         max-size: "0.3m"
  
  server:
    depends_on:
      - neo4j
        #condition: service_healthy
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: 100f_server_graphql
    restart: unless-stopped
    # environment:
    #     REDIS_URL: ${REDIS_URL}
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.server.rule=Host(`${HOST}`) && PathPrefix(`/api`)"
    #   - "traefik.http.routers.server.entrypoints=web, websecure"
    #   - "traefik.http.routers.server.tls.certresolver=resolver"
    ports: #[4000]
      - 4000:4000
    volumes:
      - ./server:/app
      - server_modules:/app/node_modules
    networks:
      - 100friends
    logging:
      driver: "json-file"
      options:
        max-size: "0.3m"
    
  frontend:
    build:
      context: frontend
      target: development
    container_name: 100f_frontend
    ports: [3000]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${HOST}`)"
      - "traefik.http.routers.frontend.entrypoints=web, websecure"
      - "traefik.http.routers.frontend.tls.certresolver=resolver"
    volumes:
      - ./frontend/src:/code/src
      - /code/node_modules
    networks:
      - 100friends
    stdin_open: true
    # depends_on:
    #   - backend
    
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: 100f_bot
    restart: on-failure
    stop_signal: SIGINT
    env_file:
      - ./bot/.bot.env
    # depends_on:
    #   - web
    volumes:
      #- bot_data:/bot/db/sqlite
      - bot_logs:/bot/logs
    networks:
      - 100friends
    logging:
      driver: "json-file"
      options:
        max-size: "0.3m"

    
volumes:
  neo4j_data:
  server_modules:
  bot_logs:
  
networks:
  100friends: