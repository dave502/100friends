version: '3.8'

services:

  traefik:
    image: traefik:v2.10
    container_name: al.traefik
    restart: unless-stopped
    command:
      - --api
      #- "--log.level=DEBUG"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.redis.address=:6379"
      - "--entrypoints.grpc.address=:50051"
      - "--certificatesresolvers.resolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.resolver.acme.email=${CERTIFICATE_EMAIL}"
      - "--certificatesresolvers.resolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.resolver.acme.httpchallenge=true"
      - "--certificatesresolvers.resolver.acme.httpchallenge.entrypoint=web"
    ports:
      - "443:443"
      - "80:80"
    labels:
      # Traefik Dashboard
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${HOST}`)"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik-secure.entrypoints=websecure"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.${HOST}`)"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=resolver"      
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
      - "traefik.http.routers.redirect-router.entrypoints=websecure"
      - "traefik.http.routers.redirect-router.tls=true"
      - "traefik.http.routers.redirect-router.tls.certresolver=resolver"  
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${BASICAUTH}"
      - "traefik.http.routers.redirect-router.rule=Host(`${HOST}`) && PathPrefix(`/__/auth/`)"
      - "traefik.http.routers.redirect-router.middlewares=redirect-regex"
      - "traefik.http.middlewares.redirect-regex.redirectregex.regex=^https://alikem.com/__/auth/(.*)" #(.)*"
      - "traefik.http.middlewares.redirect-regex.redirectregex.replacement=https://friends-a2c14.firebaseapp.com/__/auth/$${1}"
      - "traefik.http.middlewares.redirect-regex.redirectregex.permanent=false"
      # - "traefik.http.middlewares.redirect-google.redirectregex.regex: `^https?://auth\\.100friends\\.ru/__/auth/handler`"
      # - "traefik.http.middlewares.redirect-google.redirectregex.replacement: `https://friends-a2c14.firebaseapp.com/__/auth/`"
      # - "traefik.http.middlewares.redirect-google.redirectregex.permanent: `false`"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - alikem
    logging:
      driver: "json-file"
      options:
        max-size: "0.3m"


  frontend:
    build:
      context: frontend
      target: development
    container_name: al.frontend
    ports: [3000]
    depends_on:
      # - bot
      - chat
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DEV_HOST}`)"
      - "traefik.http.routers.frontend.entrypoints=web, websecure"
      - "traefik.http.routers.frontend.tls.certresolver=resolver"
    volumes:
      - ./frontend/src:/code/src
      - /code/node_modules
    networks:
      - alikem
    stdin_open: true
    # depends_on:
    #   - backend


  neo4j:

    image: neo4j:5.15.0
    hostname: $NEO4_HOST
    container_name: al.neo4j
    environment:
      NEO4J_AUTH: $NEO4_USER/$NEO4_PASS
    # HTTP (7474) ; Bolt (7687)
    ports:
      - "7474:7474"
      - "7687:7687"

    # Uncomment the volumes to be mounted to make them accessible from outside the container.
    # https://neo4j.com/docs/operations-manual/current/docker/mounting-volumes/
    volumes:
    # APOC ext https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/5.15.0
    # APOC core https://github.com/neo4j/apoc/releases/5.15.0
    
      - neo4j_data:/data
      - ./neo4j/plugins:/plugins
      - ./neo4j/conf:/conf
      # - ./neo4j/conf/neo4j.conf:/conf/neo4j.conf 
      # - ./neo4j/logs:/logs
      # - ./neo4j/import/:/import
      #- ./metrics/server1:/metrics
      #- ./licenses/server1:/licenses
      #- ./ssl/server1:/ssl

    networks:
      - alikem
    tmpfs:
      - /var/lib/neo4j/run
    logging:
      driver: "json-file"
      options:
        max-size: "0.3m"
        

    # Simple check testing whether the port 7474 is opened.
    # If so, the instance running inside the container is considered as "healthy".
    # This status can be checked using the "docker ps" command.
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]

    # # Set up the user
    # user: ${USER_ID}:${GROUP_ID}
    
  
  gql_server:
    depends_on:
      - neo4j
        #condition: service_healthy
    build:
      context: ./gql_server
      dockerfile: Dockerfile
    container_name: al.gql_server
    hostname: $GQL_HOST
    restart: unless-stopped
    environment:
      NEO4_USER:  ${NEO4_USER}
      NEO4_PASS:  ${NEO4_PASS}
      NEO4_HOST:  ${NEO4_HOST}
      JWT_SECRET: ${JWT_SECRET}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gql_server.tls=true"  
      - "traefik.http.routers.gql_server.entrypoints=websecure"
      - "traefik.http.routers.gql_server.rule=Host(`${HOST}`) && PathPrefix(`/graphql`)"
      - "traefik.http.routers.server.tls.certresolver=resolver"
    ports: [4000]
    volumes:
      - ./gql_server:/app
      - gql_server_modules:/app/node_modules
    networks:
      - alikem
    logging:
      driver: "json-file"
      options:
        max-size: "0.3m"

    
  auth:
    depends_on:
      - neo4j
        #condition: service_healthy
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: al.auth_server
    restart: unless-stopped
    env_file:
      - ./auth/.auth.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.tls=true"  
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.rule=Host(`${HOST}`) && PathPrefix(`/auth/`)"
      - "traefik.http.routers.auth.tls.certresolver=resolver"
    ports: [8055]
    volumes:
      - ./auth:/app
      - auth_modules:/app/node_modules
    networks:
      - alikem
    logging:
      driver: "json-file"
      options:
        max-size: "0.3m"
    
  # bot:
  #   build:
  #     context: ./bot
  #     dockerfile: Dockerfile
  #   container_name: al.bot
  #   restart: on-failure
  #   stop_signal: SIGINT
  #   env_file:
  #     - ./bot/.bot.env
  #   volumes:
  #     - bot_logs:/bot/logs
  #   networks:
  #     - alikem
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "0.3m"

  chat:
    build:
      context: ./chat
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: al.chat_server
    depends_on:
      - postgres
    env_file:
      - .env
    ports:
     - ${CHAT_SERVER_PORT:-9010}:${CHAT_SERVER_PORT:-9010}
    networks:
      - alikem
    logging:
        driver: "json-file"
        options:
          max-size: "0.3m"


  
  # rabbitmq:
  #   hostname: ${RMQ_HOST:-rabbitmq}
  #   container_name: 100f_rabbit
  #   image: rabbitmq:3-management
  #   restart: unless-stopped
  #   #command: rabbitmq-server
  #   expose:
  #     - 5672:5672 #amqp
  #     - 15672:15672 #http
  #     - 15692:15692  #prometheus
  #   volumes:
  #     - rabbit_data:/var/lib/rabbitmq
  #   # env_file:
  #   #   - dev.env
  #   environment:
  #     RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE:-secret_cookie}
  #     RABBITMQ_DEFAULT_USER: ${RMQ_USERNAME:-admin}
  #     RABBITMQ_DEFAULT_PASS: ${RMQ_PASSWORD:-admin}
  #     # для прода желательно задать пороговое значение 2 гигабита
  #     #RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
  #   # healthcheck:
  #   #   test: rabbitmq-diagnostics -q ping
  #   #   interval: 30s
  #   #   timeout: 30s
  #   #   retries: 3
  #   networks:
  #     - alikem
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "0.3m"

        
  postgres:
    hostname: ${DB_HOST:-postgres}
    container_name: al.postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_DATABASE}
      PGDATA: /data/postgres
    volumes:
       - chat_db:/data/postgres
    ports: [5432]
    networks:
      - alikem
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d chat_db -U ${DB_USERNAME:-postgres}" ]
      interval: 30s
      timeout: 10s
      retries: 5



  adminer:
    image: adminer
    container_name: al.pgadminer
    restart: always
    ports:
      - 8080:8080  
    networks:
      - alikem
        

volumes:
  neo4j_data:
  chat_db:
  gql_server_modules:
  auth_modules:
  bot_logs:
  # rabbit_data:
  
networks:
  alikem: