// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: user_api.proto

package user_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAPI_InitUserRegistration_FullMethodName  = "/user_api.UserAPI/initUserRegistration"
	UserAPI_FinishUserRegistraton_FullMethodName = "/user_api.UserAPI/finishUserRegistraton"
	UserAPI_SetUserIsGood_FullMethodName         = "/user_api.UserAPI/setUserIsGood"
	UserAPI_SetUserWordVector_FullMethodName     = "/user_api.UserAPI/setUserWordVector"
	UserAPI_SetUserInfo_FullMethodName           = "/user_api.UserAPI/setUserInfo"
	UserAPI_SetUserAvatar_FullMethodName         = "/user_api.UserAPI/setUserAvatar"
	UserAPI_GetUserInfo_FullMethodName           = "/user_api.UserAPI/getUserInfo"
	UserAPI_GetUserAvatar_FullMethodName         = "/user_api.UserAPI/getUserAvatar"
	UserAPI_GetUserIsGood_FullMethodName         = "/user_api.UserAPI/getUserIsGood"
	UserAPI_GetUserBySocialNet_FullMethodName    = "/user_api.UserAPI/getUserBySocialNet"
)

// UserAPIClient is the client API for UserAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAPIClient interface {
	InitUserRegistration(ctx context.Context, in *UserSocialID, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	FinishUserRegistraton(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	SetUserIsGood(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	SetUserWordVector(ctx context.Context, in *UserWordsVector, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	SetUserInfo(ctx context.Context, in *UserAdditonalInfo, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	SetUserAvatar(ctx context.Context, in *UserAvatar, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	GetUserInfo(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*UserAdditonalInfo, error)
	GetUserAvatar(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*UserAvatar, error)
	GetUserIsGood(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	GetUserBySocialNet(ctx context.Context, in *UserSocialID, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
}

type userAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAPIClient(cc grpc.ClientConnInterface) UserAPIClient {
	return &userAPIClient{cc}
}

func (c *userAPIClient) InitUserRegistration(ctx context.Context, in *UserSocialID, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, UserAPI_InitUserRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) FinishUserRegistraton(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, UserAPI_FinishUserRegistraton_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) SetUserIsGood(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, UserAPI_SetUserIsGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) SetUserWordVector(ctx context.Context, in *UserWordsVector, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, UserAPI_SetUserWordVector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) SetUserInfo(ctx context.Context, in *UserAdditonalInfo, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, UserAPI_SetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) SetUserAvatar(ctx context.Context, in *UserAvatar, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, UserAPI_SetUserAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserInfo(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*UserAdditonalInfo, error) {
	out := new(UserAdditonalInfo)
	err := c.cc.Invoke(ctx, UserAPI_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserAvatar(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*UserAvatar, error) {
	out := new(UserAvatar)
	err := c.cc.Invoke(ctx, UserAPI_GetUserAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserIsGood(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, UserAPI_GetUserIsGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserBySocialNet(ctx context.Context, in *UserSocialID, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, UserAPI_GetUserBySocialNet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAPIServer is the server API for UserAPI service.
// All implementations must embed UnimplementedUserAPIServer
// for forward compatibility
type UserAPIServer interface {
	InitUserRegistration(context.Context, *UserSocialID) (*wrapperspb.UInt64Value, error)
	FinishUserRegistraton(context.Context, *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error)
	SetUserIsGood(context.Context, *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error)
	SetUserWordVector(context.Context, *UserWordsVector) (*wrapperspb.UInt64Value, error)
	SetUserInfo(context.Context, *UserAdditonalInfo) (*wrapperspb.UInt64Value, error)
	SetUserAvatar(context.Context, *UserAvatar) (*wrapperspb.UInt64Value, error)
	GetUserInfo(context.Context, *wrapperspb.UInt64Value) (*UserAdditonalInfo, error)
	GetUserAvatar(context.Context, *wrapperspb.UInt64Value) (*UserAvatar, error)
	GetUserIsGood(context.Context, *wrapperspb.UInt64Value) (*wrapperspb.BoolValue, error)
	GetUserBySocialNet(context.Context, *UserSocialID) (*wrapperspb.UInt64Value, error)
	mustEmbedUnimplementedUserAPIServer()
}

// UnimplementedUserAPIServer must be embedded to have forward compatible implementations.
type UnimplementedUserAPIServer struct {
}

func (UnimplementedUserAPIServer) InitUserRegistration(context.Context, *UserSocialID) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUserRegistration not implemented")
}
func (UnimplementedUserAPIServer) FinishUserRegistraton(context.Context, *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUserRegistraton not implemented")
}
func (UnimplementedUserAPIServer) SetUserIsGood(context.Context, *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserIsGood not implemented")
}
func (UnimplementedUserAPIServer) SetUserWordVector(context.Context, *UserWordsVector) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserWordVector not implemented")
}
func (UnimplementedUserAPIServer) SetUserInfo(context.Context, *UserAdditonalInfo) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserInfo not implemented")
}
func (UnimplementedUserAPIServer) SetUserAvatar(context.Context, *UserAvatar) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserAvatar not implemented")
}
func (UnimplementedUserAPIServer) GetUserInfo(context.Context, *wrapperspb.UInt64Value) (*UserAdditonalInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserAPIServer) GetUserAvatar(context.Context, *wrapperspb.UInt64Value) (*UserAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAvatar not implemented")
}
func (UnimplementedUserAPIServer) GetUserIsGood(context.Context, *wrapperspb.UInt64Value) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIsGood not implemented")
}
func (UnimplementedUserAPIServer) GetUserBySocialNet(context.Context, *UserSocialID) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBySocialNet not implemented")
}
func (UnimplementedUserAPIServer) mustEmbedUnimplementedUserAPIServer() {}

// UnsafeUserAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAPIServer will
// result in compilation errors.
type UnsafeUserAPIServer interface {
	mustEmbedUnimplementedUserAPIServer()
}

func RegisterUserAPIServer(s grpc.ServiceRegistrar, srv UserAPIServer) {
	s.RegisterService(&UserAPI_ServiceDesc, srv)
}

func _UserAPI_InitUserRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSocialID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).InitUserRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_InitUserRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).InitUserRegistration(ctx, req.(*UserSocialID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_FinishUserRegistraton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).FinishUserRegistraton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_FinishUserRegistraton_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).FinishUserRegistraton(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_SetUserIsGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).SetUserIsGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_SetUserIsGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).SetUserIsGood(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_SetUserWordVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWordsVector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).SetUserWordVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_SetUserWordVector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).SetUserWordVector(ctx, req.(*UserWordsVector))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_SetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAdditonalInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).SetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_SetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).SetUserInfo(ctx, req.(*UserAdditonalInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_SetUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).SetUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_SetUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).SetUserAvatar(ctx, req.(*UserAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserInfo(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_GetUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserAvatar(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserIsGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserIsGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_GetUserIsGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserIsGood(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserBySocialNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSocialID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserBySocialNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAPI_GetUserBySocialNet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserBySocialNet(ctx, req.(*UserSocialID))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAPI_ServiceDesc is the grpc.ServiceDesc for UserAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_api.UserAPI",
	HandlerType: (*UserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initUserRegistration",
			Handler:    _UserAPI_InitUserRegistration_Handler,
		},
		{
			MethodName: "finishUserRegistraton",
			Handler:    _UserAPI_FinishUserRegistraton_Handler,
		},
		{
			MethodName: "setUserIsGood",
			Handler:    _UserAPI_SetUserIsGood_Handler,
		},
		{
			MethodName: "setUserWordVector",
			Handler:    _UserAPI_SetUserWordVector_Handler,
		},
		{
			MethodName: "setUserInfo",
			Handler:    _UserAPI_SetUserInfo_Handler,
		},
		{
			MethodName: "setUserAvatar",
			Handler:    _UserAPI_SetUserAvatar_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _UserAPI_GetUserInfo_Handler,
		},
		{
			MethodName: "getUserAvatar",
			Handler:    _UserAPI_GetUserAvatar_Handler,
		},
		{
			MethodName: "getUserIsGood",
			Handler:    _UserAPI_GetUserIsGood_Handler,
		},
		{
			MethodName: "getUserBySocialNet",
			Handler:    _UserAPI_GetUserBySocialNet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_api.proto",
}
